name: docker-build

inputs:
  runner:
    required: false
    type: string
    default: "self-hosted"
    description: "the github runner to run on, options are {ubuntu-latest, self-hosted, frontend}"
  service:
    required: true
    type: string
  release-tag:
    required: true
    type: string
  dockerfilepath:
    required: false
    type: string
    default: "./Dockerfile" # Dockerfile in the root of the repo
  docker-build-args:
    required: false
    type: string
    description: "newline separated list of non-secret arguments to pass to the docker build, e.g. 'APP_ENV=stg\nFOO=foo'"
  docker-image-path:
    required: false
    description: "custom path to access the docker image"
    type: string
  JFROG_FLOWCODE_SERVER_NAME:
    required: true
    type: string
  JFROG_FLOWCODE_FC_DOCKER_USERNAME:
    required: true
    type: string
  JFROG_FLOWCODE_FC_DOCKER_PASSWORD:
    required: true
    type: string
  JFROG_FLOWCODE_FC_DOCKER_REPO:
    required: true
    type: string
  PERSONAL_ACCESS_TOKEN_GITHUB_WORKFLOWS_CICD:
    required: true
    type: string
  ECR_FLOWCODE_FC_DOCKER_REPO:
    required: true
    type: string
  ECR_FLOWCODE_FC_DOCKER_SERVER:
    required: true
    type: string
  ECR_FLOWCODE_FC_DOCKER_KEY:
    required: true
    type: string
  ECR_FLOWCODE_FC_DOCKER_SECRET:
    required: true
    type: string

runs:
  using: "composite"
  steps:
    -
      name: Set AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ inputs.ECR_FLOWCODE_FC_DOCKER_KEY }}
        aws-secret-access-key: ${{ inputs.ECR_FLOWCODE_FC_DOCKER_SECRET }}
        aws-region: us-east-1
    -
      name: Set up ECR repo if doesn't exist
      id: ecr-repo
      uses: int128/create-ecr-repository-action@v1
      with:
        repository: ${{ inputs.service }}
    -
      name: Set up Docker Context for Buildx
      id: buildx-context
      shell: bash
      run: |
        docker context create builders
    -
      name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
      with:
        endpoint: builders
    -
      name: Login to Artifactory
      uses: docker/login-action@v2
      with:
        registry: ${{ inputs.JFROG_FLOWCODE_SERVER_NAME }}
        username: ${{ inputs.JFROG_FLOWCODE_FC_DOCKER_USERNAME }}
        password: ${{ inputs.JFROG_FLOWCODE_FC_DOCKER_PASSWORD }}
    -
      name: Login to ECR
      uses: docker/login-action@v2
      with:
        registry: ${{ inputs.ECR_FLOWCODE_FC_DOCKER_SERVER }}
        username: ${{ inputs.ECR_FLOWCODE_FC_DOCKER_KEY }}
        password: ${{ inputs.ECR_FLOWCODE_FC_DOCKER_SECRET }}
    -
      # Same as the nonprod workflow, except the image tag is the github release tag not the SHA.
      name: Build and push
      id: docker_build
      uses: docker/build-push-action@v2
      with:
        push: true
        file: ${{ inputs.dockerfilepath }}
        github-token: ${{ inputs.PERSONAL_ACCESS_TOKEN_GITHUB_WORKFLOWS_CICD }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        tags: |
          ${{ inputs.JFROG_FLOWCODE_SERVER_NAME }}/${{ inputs.JFROG_FLOWCODE_FC_DOCKER_REPO }}/${{ inputs.service }}${{ inputs.docker-image-path }}:${{ inputs.release-tag }}
          ${{ inputs.ECR_FLOWCODE_FC_DOCKER_SERVER }}/${{ inputs.service }}:${{ inputs.release-tag }}
        # GITHUB_USERNAME and GITHUB_PASSWORD are needed to pull private repos in the build process.
        build-args: |
          GITHUB_USERNAME=fc-cicd-rw
          BUILD_ID=${{ github.sha }}
          VERSION=${{ github.sha }}
          ${{ inputs.docker-build-args }}
        secrets: |
          GITHUB_TOKEN=${{ inputs.PERSONAL_ACCESS_TOKEN_GITHUB_WORKFLOWS_CICD }}
