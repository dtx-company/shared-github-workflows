name: build-and-push-and-nonprod-release

on:
  workflow_call:
    inputs:
      runner:
        required: false
        type: string
        default: "self-hosted"
        description: "the github runner to run on, options are {ubuntu-latest, self-hosted, frontend}"
      service:
        required: true
        type: string
      project:
        required: true
        type: string
      extra-deployments:
        required: false
        description: "for services that have multiple deployments in their values.yaml in fc-infra-kubernetes, provide the names of the other deployments e.g. 'worker,beat' as a comma separated list"
        type: string
      dockerfilepath:
        required: false
        type: string
        default: "./Dockerfile" # Dockerfile in the root of the repo
      docker-build-args:
        required: false
        type: string
        description: "newline separated list of non-secret arguments to pass to the docker build, e.g. 'APP_ENV=stg\nFOO=foo'"
      awsenvs:
        required: false
        description: "comma separated list of envs to release to, defaults to 'fc-services-stg/use1,fc-services-preprod/use1'"
        type: string
        default: "fc-services-stg/use1,fc-services-preprod/use1"
      post-build-script:
        required: false
        description: "file path of a shell script to run between the build step and the release step, e.g. 'scripts/myscript.sh'"
        type: string
      post-build-script-inputs:
        required: false
        description: "json string to pass to the post-build-script"
        type: string
      ecr-image-path:
        required: false
        description: "custom path to access the ECR docker image"
        type: string
    secrets:
      PERSONAL_ACCESS_TOKEN_GITHUB_WORKFLOWS_CICD:
        required: true
      JFROG_FLOWCODE_FC_PYPI_USERNAME:
        required: false
      JFROG_FLOWCODE_FC_PYPI_PASSWORD:
        required: false
      STATIC_ASSETS_S3_AWS_ACCESS_KEY_ID:
        required: false
      STATIC_ASSETS_S3_AWS_SECRET_ACCESS_KEY:
        required: false
      ECR_FLOWCODE_SDLC_FC_DOCKER_SERVER:
        required: true
      ECR_FLOWCODE_FC_DOCKER_KEY:
        required: true
      ECR_FLOWCODE_FC_DOCKER_SECRET:
        required: true

permissions:
  id-token: write    # Required for aws role assumption

jobs:
  cd:
    runs-on: ${{ inputs.runner }}
    env:
      IMAGE_TAG: ${{ github.sha }}
    steps:
      -
        name: Set AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ECR_FLOWCODE_FC_DOCKER_KEY }}
          aws-secret-access-key: ${{ secrets.ECR_FLOWCODE_FC_DOCKER_SECRET }}
          aws-region: us-east-1
      -
        name: Set up ECR repo if doesn't exist
        id: ecr-repo
        uses: int128/create-ecr-repository-action@v1
        with:
          repository: ${{ inputs.service }}
      -
        name: Set up Docker Context for Buildx
        id: buildx-context
        run: |
          docker context create builders
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          endpoint: builders
      -
        name: Login to ECR
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.ECR_FLOWCODE_SDLC_FC_DOCKER_SERVER }}
          username: ${{ secrets.ECR_FLOWCODE_FC_DOCKER_KEY }}
          password: ${{ secrets.ECR_FLOWCODE_FC_DOCKER_SECRET }}
      -
        name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          file: ${{ inputs.dockerfilepath }}
          github-token: ${{ secrets.PERSONAL_ACCESS_TOKEN_GITHUB_WORKFLOWS_CICD }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: |
            ${{ secrets.ECR_FLOWCODE_SDLC_FC_DOCKER_SERVER }}/${{ inputs.service }}:${{ inputs.ecr-image-path }}${{ env.IMAGE_TAG }}
          # GITHUB_USERNAME and GITHUB_TOKEN are needed to pull private repos in the build process.
          # JFROG_FLOWCODE_FC_PYPI_USERNAME and JFROG_FLOWCODE_FC_PYPI_PASSWORD are needed to pull from private pypi repos.
          # VERSION and BUILD_ID are used by the flow frontend build process.
          build-args: |
            GITHUB_USERNAME=fc-cicd-rw
            JFROG_FLOWCODE_FC_PYPI_USERNAME=${{ secrets.JFROG_FLOWCODE_FC_PYPI_USERNAME }}
            JFROG_FLOWCODE_FC_PYPI_PASSWORD=${{ secrets.JFROG_FLOWCODE_FC_PYPI_PASSWORD }}
            BUILD_ID=${{ inputs.service }}-${{ env.IMAGE_TAG }}
            VERSION=${{ env.IMAGE_TAG }}
            ${{ inputs.docker-build-args }}

          secrets: |
            GITHUB_TOKEN=${{ secrets.PERSONAL_ACCESS_TOKEN_GITHUB_WORKFLOWS_CICD }}
      -
        name: Checkout repo to run post-build script
        if: inputs.post-build-script != ''
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN_GITHUB_WORKFLOWS_CICD }}
      -
        name: Run post-build script
        if: inputs.post-build-script != ''
        env:
          # Don't edit or delete these without confirming it won't break the scripts that use them.
          ECR_FLOWCODE_SDLC_FC_DOCKER_SERVER: ${{ secrets.ECR_FLOWCODE_SDLC_FC_DOCKER_SERVER }}
          SERVICE_NAME: ${{ inputs.service }}
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
          ECR_IMAGE_PATH: ${{ inputs.ecr-image-path }}
          POST_BUILD_SCRIPT_INPUTS: ${{ inputs.post-build-script-inputs }}
          AWS_ACCESS_KEY_ID: ${{ secrets.STATIC_ASSETS_S3_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.STATIC_ASSETS_S3_AWS_SECRET_ACCESS_KEY }}
        run: |
          ./${{ inputs.post-build-script }}
      -
        name: Checkout kubernetes infra repo
        uses: actions/checkout@v2
        with:
          repository: dtx-company/fc-infra-kubernetes
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN_GITHUB_WORKFLOWS_CICD }}
      -
        name: Update the image tags in values.yaml and push commit
        run: |
          echo "Installing yq..."
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod a+x /usr/local/bin/yq

          echo;
          echo "Setting git config..."
          git config --local user.name ${{ github.event.pusher.name }}
          git config --local user.email ${{ github.event.pusher.email }}

          echo;
          IFS=, read -ra awsenvs <<< "${{ inputs.awsenvs }}" # get list of envs to release to
          for awsenv in "${awsenvs[@]}"
          do
            filename="cloud/aws/${awsenv}/primary/${{ inputs.project }}/applications/${{ inputs.service }}/values.yaml"
            IFS=, read -ra deployments <<< "${{ inputs.extra-deployments }}"  # split by comma into an array
            deployments+=("fc-service")                                       # fc-service is always included
            echo "Updating ${filename} for deployments ${deployments[*]}..."
            for d in "${deployments[@]}"
            do
              path=".${d}.process.image" yq -i eval 'eval(strenv(path)) = "${{ secrets.ECR_FLOWCODE_SDLC_FC_DOCKER_SERVER }}/${{ inputs.service }}"'  ${filename}
              path=".${d}.process.tag" yq -i eval 'eval(strenv(path)) = "${{ inputs.ecr-image-path }}${{ env.IMAGE_TAG }}"'  ${filename}
            done
            git add ${filename}
          done

          echo; echo;
          echo "Pushing to git..."
          git diff HEAD
          if [[ $(git diff HEAD) ]]; then
            git commit -m "cicd-auto: nonprod bump ${{ inputs.service }} to ${{ env.IMAGE_TAG }}" -m "triggered from https://github.com/${{ github.repository }}/commit/${{ github.sha }}"
            git push origin HEAD
          else
            echo "Nothing to push"
          fi
